@page "/category"
@inject ICategoryRepository _categoryRepository

@if (IsProcessing)
{
    <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center ">

        <img src="/images/loading.gif"  alt="loading"/>
    </div>
}
else
{
    <div class="card shadow border-0 mt-4">
        <div class="card-header bg-black bg-gradient m-lg-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2" > 
                        Category List
                    </h2>
                </div>
            </div>    
        </div>
        <div class="card-body p-4">
            <div class="row pb-3">
                <div class="col-12 text-end">
                    <a href="category/create" class="btn btn-secondary" style="width:250px;">Add New Category</a>
                </div>
            </div>
            @if (Categories.Any())
            {
                <table class="table table-bordered table-striped">
                    <thead>
                        <tr>
                            <th>Category Name</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach(var obj in Categories)
                        {
                            <tr>
                                <td>
                                    @obj.Name
                                </td>
                                <td>
                                    <a href="@($"category/update/{obj.Id}")" class="btn btn-primary" >Edit</a>
                                    <button class="btn btn-danger">Delete</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
}

@code {
    private IEnumerable<Category> Categories { get; set; } = new List<Category>();
    private bool IsProcessing { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {

    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCategories();
            IsProcessing = false;
            StateHasChanged();

        }
    }


    private async Task LoadCategories()
    {
        Categories = await _categoryRepository.GetAllAsync();

    }

}
 